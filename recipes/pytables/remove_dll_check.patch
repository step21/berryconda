diff --git a/tables/__init__.py b/tables/__init__.py
index 5c2430a..782e085 100644
--- a/tables/__init__.py
+++ b/tables/__init__.py
@@ -20,81 +20,6 @@ to efficiently cope with extremely large amounts of data.
 """


-import os
-import sys
-
-
-# On Windows, pre-load the HDF5 DLLs into the process via Ctypes
-# to improve diagnostics and avoid issues when loading DLLs during runtime.
-# However, if running from a frozen app (via PyInstaller), skip the check.
-if os.name == 'nt' and not getattr(sys, 'frozen', False):
-    import ctypes
-
-    def _load_library(dllname, loadfunction, dllpaths=('', )):
-        """Load a DLL via ctypes load function. Return None on failure.
-
-        By default, try to load the DLL from the current package
-        directory first, then from the Windows DLL search path.
-
-        Python >= 3.8 no longer searches PATH for DLLs. Skip PATH modification
-        on Python >= 3.8.
-
-        """
-        try:
-            dllpaths = (os.path.abspath(
-                os.path.dirname(__file__)), ) + dllpaths
-        except NameError:
-            pass  # PyPy and frozen distributions have no __file__ attribute
-        oldenv = None
-        for path in dllpaths:
-            if path and sys.version_info < (3, 8):
-                # Temporarily add the path to the PATH environment variable
-                # so Windows can find additional DLL dependencies.
-                try:
-                    oldenv = os.environ['PATH']
-                    os.environ['PATH'] = path + ';' + oldenv
-                except KeyError:
-                    oldenv = None
-            try:
-                return loadfunction(os.path.join(path, dllname))
-            except WindowsError:
-                pass
-            finally:
-                if path and oldenv is not None:
-                    os.environ['PATH'] = oldenv
-        return None
-
-    # In order to improve diagnosis of a common Windows dependency
-    # issue, we explicitly test that we can load the HDF5 dll before
-    # loading tables.utilsextensions.
-    import sys
-    hdf5_dlls = ['hdf5.dll', 'hdf5dll.dll', 'pytables_hdf5.dll']
-    if hasattr(sys, 'gettotalrefcount'):  # running with debug interpreter
-        hdf5_dlls = ['hdf5_D.dll', 'hdf5ddll.dll']
-    for dll in hdf5_dlls:
-        if _load_library(dll, ctypes.cdll.LoadLibrary):
-            break
-    else:
-        if sys.version_info < (3, 8):
-            dll_loc = 'can be found in the system path'
-        else:
-            dll_loc = 'is installed in the package folder'
-        raise ImportError(
-            'Could not load any of %s, please ensure that it %s.' % (hdf5_dlls, dll_loc))
-
-    # Some PyTables binary distributions place the dependency DLLs in the
-    # tables package directory.
-    # The lzo2 and libbz2 DLLs are loaded dynamically at runtime but can't be
-    # found because the package directory is not in the Windows DLL search
-    # path.
-    # This pre-loads lzo2 and libbz2 DLLs from the tables package directory.
-    if not _load_library('lzo2.dll', ctypes.cdll.LoadLibrary):
-        pass
-
-    if not _load_library('libbz2.dll', ctypes.cdll.LoadLibrary):
-        pass
-
-
 # Necessary imports to get versions stored on the cython extension
 from .utilsextension import (
     get_pytables_version, get_hdf5_version, blosc_compressor_list,
